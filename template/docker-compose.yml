services:
  frontend:
    container_name: hims-frontend
    ports:
      - target: ${FRONTEND_SERVICE_PORT}
        published: ${FRONTEND_SERVICE_PORT}
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        FRONTEND_SERVICE_PORT: ${FRONTEND_SERVICE_PORT}
        NODE_VERSION: ${NODE_VERSION}
    env_file:
      - .env
      - .hims.env
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_SERVICE_PORT}/"]
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 100s
    depends_on:
      api:
        condition: service_healthy
    networks:
      - default

  admin:
    image: himmelforce/hims-admin:latest
    container_name: hims-admin
    ports:
      - target: ${ADMIN_SERVICE_PORT}
        published: ${ADMIN_SERVICE_PORT}
    env_file:
      - .env
      - .hims.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ADMIN_SERVICE_PORT}/"]
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 100s
    depends_on:
      api:
        condition: service_healthy
    networks:
      - default

  api:
    image: himmelforce/hims-api:latest
    container_name: hims-api
    ports:
      - target: ${API_PORT}
        published: ${API_PORT}
    env_file:
      - .env
      - .hims.env
    volumes:
      - ./uploads:/usr/src/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT}/api/"]
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 100s
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - default

  mongo:
    image: mongo
    container_name: hims-mongo
    ports:
      - target: ${MONGO_PORT}
        published: ${MONGO_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - ./mongo-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - default

  redis:
    image: redis
    container_name: hims-redis
    ports:
      - target: ${REDIS_PORT}
        published: ${REDIS_PORT}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - default

  traefik:
    image: traefik:${TRAEFIK_VERSION}
    container_name: hims-traefik
    ports:
      - target: 80
        published: 80
      - target: 443
        published: 443
      - target: 8080
        published: 8080
    volumes:
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml"
      - "./traefik/dynamic.yml:/etc/traefik/dynamic.yml"
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_healthy
      admin:
        condition: service_healthy

volumes:
  mongo-data:
    driver: local
  uploads:
    driver: local

networks:
  default:
